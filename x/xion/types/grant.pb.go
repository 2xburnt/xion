// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xion/v1/grant.proto

package types

import (
	fmt "fmt"
	github_com_CosmWasm_wasmd_x_wasm_types "github.com/CosmWasm/wasmd/x/wasm/types"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CodeIdExecutionAuthorization defines authorization for wasm execute.
type CodeIdExecutionAuthorization struct {
	// Grants for contract executions
	Grants []CodeIdGrant `protobuf:"bytes,1,rep,name=grants,proto3" json:"grants"`
}

func (m *CodeIdExecutionAuthorization) Reset()         { *m = CodeIdExecutionAuthorization{} }
func (m *CodeIdExecutionAuthorization) String() string { return proto.CompactTextString(m) }
func (*CodeIdExecutionAuthorization) ProtoMessage()    {}
func (*CodeIdExecutionAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_719b4b71618cd618, []int{0}
}
func (m *CodeIdExecutionAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeIdExecutionAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodeIdExecutionAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodeIdExecutionAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeIdExecutionAuthorization.Merge(m, src)
}
func (m *CodeIdExecutionAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *CodeIdExecutionAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeIdExecutionAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_CodeIdExecutionAuthorization proto.InternalMessageInfo

// CodeIdGrant a granted permission for a single code
type CodeIdGrant struct {
	// CodeId is the unique identifier created when uploading the contract.
	CodeId uint64 `protobuf:"varint,1,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	// Limit defines execution limits that are enforced and updated when the grant
	// is applied. When the limit lapsed the grant is removed.
	Limit *types.Any `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Filter define more fine-grained control on the message payload passed
	// to the contract in the operation. When no filter applies on execution, the
	// operation is prohibited.
	Filter *types.Any `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (m *CodeIdGrant) Reset()         { *m = CodeIdGrant{} }
func (m *CodeIdGrant) String() string { return proto.CompactTextString(m) }
func (*CodeIdGrant) ProtoMessage()    {}
func (*CodeIdGrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_719b4b71618cd618, []int{1}
}
func (m *CodeIdGrant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CodeIdGrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CodeIdGrant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CodeIdGrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CodeIdGrant.Merge(m, src)
}
func (m *CodeIdGrant) XXX_Size() int {
	return m.Size()
}
func (m *CodeIdGrant) XXX_DiscardUnknown() {
	xxx_messageInfo_CodeIdGrant.DiscardUnknown(m)
}

var xxx_messageInfo_CodeIdGrant proto.InternalMessageInfo

// MaxCallsLimit limited number of calls to the contract. No funds transferable.
// Since: wasmd 0.30
type MaxCallsLimit struct {
	// Remaining number that is decremented on each execution
	Remaining uint64 `protobuf:"varint,1,opt,name=remaining,proto3" json:"remaining,omitempty"`
}

func (m *MaxCallsLimit) Reset()         { *m = MaxCallsLimit{} }
func (m *MaxCallsLimit) String() string { return proto.CompactTextString(m) }
func (*MaxCallsLimit) ProtoMessage()    {}
func (*MaxCallsLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_719b4b71618cd618, []int{2}
}
func (m *MaxCallsLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaxCallsLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaxCallsLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaxCallsLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxCallsLimit.Merge(m, src)
}
func (m *MaxCallsLimit) XXX_Size() int {
	return m.Size()
}
func (m *MaxCallsLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxCallsLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MaxCallsLimit proto.InternalMessageInfo

// MaxFundsLimit defines the maximal amounts that can be sent to the contract.
// Since: wasmd 0.30
type MaxFundsLimit struct {
	// Amounts is the maximal amount of tokens transferable to the contract.
	Amounts github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amounts,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amounts"`
}

func (m *MaxFundsLimit) Reset()         { *m = MaxFundsLimit{} }
func (m *MaxFundsLimit) String() string { return proto.CompactTextString(m) }
func (*MaxFundsLimit) ProtoMessage()    {}
func (*MaxFundsLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_719b4b71618cd618, []int{3}
}
func (m *MaxFundsLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MaxFundsLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MaxFundsLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MaxFundsLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaxFundsLimit.Merge(m, src)
}
func (m *MaxFundsLimit) XXX_Size() int {
	return m.Size()
}
func (m *MaxFundsLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_MaxFundsLimit.DiscardUnknown(m)
}

var xxx_messageInfo_MaxFundsLimit proto.InternalMessageInfo

// CombinedLimit defines the maximal amounts that can be sent to a contract and
// the maximal number of calls executable. Both need to remain >0 to be valid.
// Since: wasmd 0.30
type CombinedLimit struct {
	// Remaining number that is decremented on each execution
	CallsRemaining uint64 `protobuf:"varint,1,opt,name=calls_remaining,json=callsRemaining,proto3" json:"calls_remaining,omitempty"`
	// Amounts is the maximal amount of tokens transferable to the contract.
	Amounts github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amounts,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amounts"`
}

func (m *CombinedLimit) Reset()         { *m = CombinedLimit{} }
func (m *CombinedLimit) String() string { return proto.CompactTextString(m) }
func (*CombinedLimit) ProtoMessage()    {}
func (*CombinedLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_719b4b71618cd618, []int{4}
}
func (m *CombinedLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CombinedLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CombinedLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CombinedLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CombinedLimit.Merge(m, src)
}
func (m *CombinedLimit) XXX_Size() int {
	return m.Size()
}
func (m *CombinedLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_CombinedLimit.DiscardUnknown(m)
}

var xxx_messageInfo_CombinedLimit proto.InternalMessageInfo

// AllowAllMessagesFilter is a wildcard to allow any type of contract payload
// message.
type AllowAllMessagesFilter struct {
}

func (m *AllowAllMessagesFilter) Reset()         { *m = AllowAllMessagesFilter{} }
func (m *AllowAllMessagesFilter) String() string { return proto.CompactTextString(m) }
func (*AllowAllMessagesFilter) ProtoMessage()    {}
func (*AllowAllMessagesFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_719b4b71618cd618, []int{5}
}
func (m *AllowAllMessagesFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowAllMessagesFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowAllMessagesFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowAllMessagesFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowAllMessagesFilter.Merge(m, src)
}
func (m *AllowAllMessagesFilter) XXX_Size() int {
	return m.Size()
}
func (m *AllowAllMessagesFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowAllMessagesFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AllowAllMessagesFilter proto.InternalMessageInfo

// AcceptedMessageKeysFilter accept only the specific contract message keys in
// the json object to be executed.
type AcceptedMessageKeysFilter struct {
	// Messages is the list of unique keys
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *AcceptedMessageKeysFilter) Reset()         { *m = AcceptedMessageKeysFilter{} }
func (m *AcceptedMessageKeysFilter) String() string { return proto.CompactTextString(m) }
func (*AcceptedMessageKeysFilter) ProtoMessage()    {}
func (*AcceptedMessageKeysFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_719b4b71618cd618, []int{6}
}
func (m *AcceptedMessageKeysFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptedMessageKeysFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptedMessageKeysFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptedMessageKeysFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptedMessageKeysFilter.Merge(m, src)
}
func (m *AcceptedMessageKeysFilter) XXX_Size() int {
	return m.Size()
}
func (m *AcceptedMessageKeysFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptedMessageKeysFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptedMessageKeysFilter proto.InternalMessageInfo

// AcceptedMessagesFilter accept only the specific raw contract messages to be
// executed.
type AcceptedMessagesFilter struct {
	// Messages is the list of raw contract messages
	Messages []github_com_CosmWasm_wasmd_x_wasm_types.RawContractMessage `protobuf:"bytes,1,rep,name=messages,proto3,casttype=github.com/CosmWasm/wasmd/x/wasm/types.RawContractMessage" json:"messages,omitempty"`
}

func (m *AcceptedMessagesFilter) Reset()         { *m = AcceptedMessagesFilter{} }
func (m *AcceptedMessagesFilter) String() string { return proto.CompactTextString(m) }
func (*AcceptedMessagesFilter) ProtoMessage()    {}
func (*AcceptedMessagesFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_719b4b71618cd618, []int{7}
}
func (m *AcceptedMessagesFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptedMessagesFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptedMessagesFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcceptedMessagesFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptedMessagesFilter.Merge(m, src)
}
func (m *AcceptedMessagesFilter) XXX_Size() int {
	return m.Size()
}
func (m *AcceptedMessagesFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptedMessagesFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptedMessagesFilter proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CodeIdExecutionAuthorization)(nil), "xion.v1.CodeIdExecutionAuthorization")
	proto.RegisterType((*CodeIdGrant)(nil), "xion.v1.CodeIdGrant")
	proto.RegisterType((*MaxCallsLimit)(nil), "xion.v1.MaxCallsLimit")
	proto.RegisterType((*MaxFundsLimit)(nil), "xion.v1.MaxFundsLimit")
	proto.RegisterType((*CombinedLimit)(nil), "xion.v1.CombinedLimit")
	proto.RegisterType((*AllowAllMessagesFilter)(nil), "xion.v1.AllowAllMessagesFilter")
	proto.RegisterType((*AcceptedMessageKeysFilter)(nil), "xion.v1.AcceptedMessageKeysFilter")
	proto.RegisterType((*AcceptedMessagesFilter)(nil), "xion.v1.AcceptedMessagesFilter")
}

func init() { proto.RegisterFile("xion/v1/grant.proto", fileDescriptor_719b4b71618cd618) }

var fileDescriptor_719b4b71618cd618 = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x4f, 0x4f, 0xd4, 0x4e,
	0x18, 0xc7, 0xb7, 0xc0, 0x6f, 0xf9, 0x31, 0x88, 0xc6, 0x4a, 0x70, 0x17, 0x49, 0xc1, 0x46, 0x03,
	0x21, 0xd9, 0x36, 0xab, 0x31, 0xc6, 0x35, 0x6a, 0x76, 0x37, 0x60, 0x88, 0x70, 0xe9, 0x45, 0xf4,
	0x42, 0xa6, 0xed, 0x50, 0x06, 0xda, 0x19, 0xd2, 0x99, 0xc2, 0x2e, 0x89, 0x07, 0xaf, 0x9e, 0x7c,
	0x13, 0x26, 0xc6, 0x13, 0x87, 0x3d, 0x1a, 0xcf, 0x64, 0x4f, 0x1c, 0x3d, 0xa1, 0x42, 0x0c, 0xef,
	0xc1, 0x93, 0x99, 0x3f, 0x0b, 0x0b, 0x22, 0x21, 0x9c, 0xbc, 0x74, 0x3a, 0xcf, 0xd3, 0x7e, 0xbf,
	0x9f, 0xe7, 0x99, 0xa7, 0x05, 0x37, 0x1a, 0x98, 0x12, 0x77, 0xa3, 0xec, 0x46, 0x29, 0x24, 0xdc,
	0x59, 0x4f, 0x29, 0xa7, 0x66, 0xbf, 0x08, 0x3a, 0x1b, 0xe5, 0xd1, 0x62, 0x44, 0x69, 0x14, 0x23,
	0x57, 0x86, 0xfd, 0x6c, 0xd9, 0x85, 0xa4, 0xa9, 0x9e, 0x19, 0x2d, 0x06, 0x94, 0x25, 0x94, 0x2d,
	0xc9, 0x9d, 0xab, 0x36, 0x3a, 0x65, 0xa9, 0x9d, 0xeb, 0x43, 0x86, 0xdc, 0x8d, 0xb2, 0x8f, 0x38,
	0x2c, 0xbb, 0x01, 0xc5, 0x44, 0xe7, 0xaf, 0xc3, 0x04, 0x13, 0xea, 0xca, 0xab, 0x0e, 0x0d, 0x47,
	0x34, 0xa2, 0x4a, 0x4a, 0xdc, 0xa9, 0xa8, 0xfd, 0xc1, 0x00, 0x63, 0x75, 0x1a, 0xa2, 0xb9, 0x70,
	0xa6, 0x81, 0x82, 0x8c, 0x63, 0x4a, 0xaa, 0x19, 0x5f, 0xa1, 0x29, 0xde, 0x82, 0x62, 0x63, 0x3e,
	0x04, 0x79, 0xc9, 0xcd, 0x0a, 0xc6, 0x44, 0xef, 0xd4, 0xe0, 0xbd, 0x61, 0x47, 0x93, 0x3b, 0xea,
	0xb5, 0xe7, 0x22, 0x59, 0x1b, 0xd8, 0xd9, 0x1b, 0xcf, 0x7d, 0x3c, 0xdc, 0x9e, 0x36, 0x3c, 0xfd,
	0x78, 0x65, 0xbe, 0xdd, 0x2a, 0xd9, 0x1a, 0x1a, 0x66, 0x7c, 0x65, 0xcb, 0xd1, 0x9c, 0xce, 0x09,
	0x83, 0x77, 0x87, 0xdb, 0xd3, 0xb7, 0x65, 0x87, 0xce, 0xc3, 0xb0, 0xdf, 0xf6, 0x80, 0xc1, 0x2e,
	0x43, 0xf3, 0x26, 0xe8, 0x0f, 0x68, 0x88, 0x96, 0x70, 0x58, 0x30, 0x26, 0x8c, 0xa9, 0x3e, 0x2f,
	0x1f, 0xc8, 0xac, 0xb9, 0x0a, 0xfe, 0x8b, 0x71, 0x82, 0x79, 0xa1, 0x67, 0xc2, 0x90, 0xb8, 0xaa,
	0xbf, 0x4e, 0xa7, 0xbf, 0x4e, 0x95, 0x34, 0x6b, 0x4f, 0xdb, 0xad, 0x52, 0x25, 0xc2, 0x7c, 0x25,
	0xf3, 0x9d, 0x80, 0x26, 0x6e, 0x9d, 0xb2, 0xe4, 0x25, 0x64, 0x89, 0xbb, 0x09, 0x59, 0x12, 0xba,
	0x0d, 0xb9, 0xba, 0xbc, 0xb9, 0x8e, 0x98, 0x53, 0xa7, 0x84, 0xa7, 0x30, 0xe0, 0x82, 0x67, 0x6b,
	0x5e, 0x48, 0x2f, 0x7a, 0xca, 0xc2, 0x4c, 0x40, 0x7e, 0x19, 0xc7, 0x1c, 0xa5, 0x85, 0xde, 0x73,
	0xcc, 0x9e, 0xb5, 0x5b, 0xa5, 0xc7, 0x97, 0x31, 0x9b, 0x95, 0xda, 0x8b, 0x9e, 0x36, 0xb1, 0x09,
	0x18, 0x5a, 0x80, 0x8d, 0x3a, 0x8c, 0x63, 0x26, 0x39, 0xcc, 0x31, 0x30, 0x90, 0xa2, 0x04, 0x62,
	0x82, 0x49, 0xa4, 0xdb, 0x70, 0x1c, 0xa8, 0x08, 0xdf, 0x3b, 0xe2, 0x00, 0x84, 0xbe, 0x23, 0x2f,
	0xf2, 0xd4, 0xfe, 0x28, 0x47, 0x1c, 0x81, 0x29, 0x21, 0x4e, 0xc8, 0xdb, 0x9f, 0x0d, 0x69, 0x38,
	0x9b, 0x91, 0x50, 0x1b, 0xae, 0x82, 0x7e, 0x98, 0xd0, 0xec, 0x78, 0x1a, 0x8a, 0x8e, 0x3e, 0x61,
	0x31, 0x88, 0x47, 0x07, 0x5c, 0xa7, 0x98, 0xd4, 0x1e, 0x88, 0x91, 0xf8, 0xf4, 0x6d, 0x7c, 0xaa,
	0xab, 0x74, 0x3d, 0xb5, 0x6a, 0x29, 0xb1, 0x70, 0xed, 0xa8, 0x6c, 0x4c, 0x98, 0x1a, 0x9f, 0x8e,
	0xc1, 0x25, 0xf1, 0x8f, 0x61, 0xed, 0x9f, 0x06, 0x18, 0xaa, 0xd3, 0xc4, 0xc7, 0x04, 0x85, 0x0a,
	0x7f, 0x12, 0x5c, 0x0b, 0x44, 0x79, 0x4b, 0xa7, 0xbb, 0x76, 0x55, 0x86, 0xbd, 0x4e, 0xb4, 0xbb,
	0xce, 0x9e, 0x7f, 0xb0, 0xce, 0x13, 0x55, 0xd9, 0x01, 0x18, 0xa9, 0xc6, 0x31, 0xdd, 0xac, 0xc6,
	0xf1, 0x02, 0x62, 0x0c, 0x46, 0x88, 0xa9, 0xc9, 0xa9, 0xcc, 0xb5, 0x5b, 0xa5, 0xbb, 0xe7, 0x4b,
	0xeb, 0x19, 0x13, 0xda, 0xb7, 0xa4, 0xf6, 0xd9, 0x52, 0xf6, 0x1b, 0x50, 0xac, 0x06, 0x01, 0x5a,
	0xe7, 0x28, 0xd4, 0x99, 0x17, 0xa8, 0xa9, 0x93, 0xa6, 0x09, 0xfa, 0xd6, 0x50, 0x53, 0xcd, 0xc4,
	0x80, 0x27, 0xef, 0xe5, 0xe7, 0x7f, 0x71, 0x6f, 0x4b, 0x79, 0xff, 0xcd, 0xc1, 0xfe, 0x62, 0x80,
	0x91, 0x53, 0xd9, 0x8e, 0xf9, 0x2b, 0xf0, 0x7f, 0xa2, 0x23, 0x12, 0xe0, 0x4a, 0xed, 0xc9, 0xaf,
	0xbd, 0xf1, 0x47, 0x17, 0xfc, 0xe0, 0x3c, 0xb8, 0xd9, 0x61, 0xd2, 0xba, 0xde, 0x91, 0xdc, 0xe5,
	0xfa, 0x77, 0x26, 0x65, 0x6d, 0x66, 0xe7, 0x87, 0x95, 0xdb, 0xd9, 0xb7, 0x8c, 0xdd, 0x7d, 0xcb,
	0xf8, 0xbe, 0x6f, 0x19, 0xef, 0x0f, 0xac, 0xdc, 0xee, 0x81, 0x95, 0xfb, 0x7a, 0x60, 0xe5, 0x5e,
	0x4f, 0x76, 0xd1, 0xfa, 0x59, 0x4a, 0x78, 0x29, 0x86, 0x3e, 0x73, 0xe5, 0x6f, 0xb1, 0xa1, 0x16,
	0x89, 0xeb, 0xe7, 0xe5, 0x9f, 0xe5, 0xfe, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x7a, 0xf2,
	0x6c, 0x54, 0x06, 0x00, 0x00,
}

func (m *CodeIdExecutionAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeIdExecutionAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodeIdExecutionAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Grants) > 0 {
		for iNdEx := len(m.Grants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Grants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGrant(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CodeIdGrant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CodeIdGrant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CodeIdGrant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != nil {
		{
			size, err := m.Limit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGrant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CodeId != 0 {
		i = encodeVarintGrant(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MaxCallsLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxCallsLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxCallsLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Remaining != 0 {
		i = encodeVarintGrant(dAtA, i, uint64(m.Remaining))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MaxFundsLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MaxFundsLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MaxFundsLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGrant(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CombinedLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CombinedLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CombinedLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGrant(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CallsRemaining != 0 {
		i = encodeVarintGrant(dAtA, i, uint64(m.CallsRemaining))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllowAllMessagesFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowAllMessagesFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowAllMessagesFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AcceptedMessageKeysFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptedMessageKeysFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptedMessageKeysFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintGrant(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AcceptedMessagesFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptedMessagesFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcceptedMessagesFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Messages[iNdEx])
			copy(dAtA[i:], m.Messages[iNdEx])
			i = encodeVarintGrant(dAtA, i, uint64(len(m.Messages[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGrant(dAtA []byte, offset int, v uint64) int {
	offset -= sovGrant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CodeIdExecutionAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Grants) > 0 {
		for _, e := range m.Grants {
			l = e.Size()
			n += 1 + l + sovGrant(uint64(l))
		}
	}
	return n
}

func (m *CodeIdGrant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CodeId != 0 {
		n += 1 + sovGrant(uint64(m.CodeId))
	}
	if m.Limit != nil {
		l = m.Limit.Size()
		n += 1 + l + sovGrant(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovGrant(uint64(l))
	}
	return n
}

func (m *MaxCallsLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Remaining != 0 {
		n += 1 + sovGrant(uint64(m.Remaining))
	}
	return n
}

func (m *MaxFundsLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovGrant(uint64(l))
		}
	}
	return n
}

func (m *CombinedLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallsRemaining != 0 {
		n += 1 + sovGrant(uint64(m.CallsRemaining))
	}
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovGrant(uint64(l))
		}
	}
	return n
}

func (m *AllowAllMessagesFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AcceptedMessageKeysFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovGrant(uint64(l))
		}
	}
	return n
}

func (m *AcceptedMessagesFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			l = len(b)
			n += 1 + l + sovGrant(uint64(l))
		}
	}
	return n
}

func sovGrant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGrant(x uint64) (n int) {
	return sovGrant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CodeIdExecutionAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeIdExecutionAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeIdExecutionAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grants = append(m.Grants, CodeIdGrant{})
			if err := m.Grants[len(m.Grants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CodeIdGrant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeIdGrant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeIdGrant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Limit == nil {
				m.Limit = &types.Any{}
			}
			if err := m.Limit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &types.Any{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxCallsLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxCallsLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxCallsLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remaining", wireType)
			}
			m.Remaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Remaining |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MaxFundsLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MaxFundsLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MaxFundsLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, types1.Coin{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CombinedLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CombinedLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CombinedLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallsRemaining", wireType)
			}
			m.CallsRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallsRemaining |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, types1.Coin{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowAllMessagesFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowAllMessagesFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowAllMessagesFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptedMessageKeysFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptedMessageKeysFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptedMessageKeysFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptedMessagesFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptedMessagesFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptedMessagesFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGrant
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGrant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, make([]byte, postIndex-iNdEx))
			copy(m.Messages[len(m.Messages)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGrant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGrant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGrant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGrant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGrant = fmt.Errorf("proto: unexpected end of group")
)
